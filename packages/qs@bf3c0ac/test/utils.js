"use strict";var test=require("tape"),utils=require("../lib/utils");test("merge()",function(e){e.deepEqual(utils.merge({a:"b"},{a:"c"}),{a:["b","c"]},"merges two objects with the same key");var a=utils.merge({foo:"bar"},{foo:{first:"123"}});e.deepEqual(a,{foo:["bar",{first:"123"}]},"merges a standalone and an object into an array");var r=utils.merge({foo:["bar",{first:"123"}]},{foo:{second:"456"}});e.deepEqual(r,{foo:{0:"bar",1:{first:"123"},second:"456"}},"merges a standalone and two objects into an array");var t=utils.merge({foo:["bar",{first:"123",second:"456"}]},{foo:"baz"});e.deepEqual(t,{foo:["bar",{first:"123",second:"456"},"baz"]},"merges an object sandwiched by two standalones into an array");var o=utils.merge({foo:["baz"]},{foo:["bar","xyzzy"]});e.deepEqual(o,{foo:["baz","bar","xyzzy"]}),e.end()}),test("assign()",function(e){var a={a:1,b:2},r={b:3,c:4},t=utils.assign(a,r);e.equal(t,a,"returns the target"),e.deepEqual(a,{a:1,b:3,c:4},"target and source are merged"),e.deepEqual(r,{b:3,c:4},"source is untouched"),e.end()});